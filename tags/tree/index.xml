<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree on ZQ.Yu</title>
    <link>https://zhiqiyu.github.io/tags/tree/</link>
    <description>Recent content in tree on ZQ.Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 18:39:05 -0400</lastBuildDate>
    
	<atom:link href="https://zhiqiyu.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 94. Binary Tree Inorder Traversal</title>
      <link>https://zhiqiyu.github.io/post/leetcode94/</link>
      <pubDate>Sun, 01 Sep 2019 18:39:05 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/leetcode94/</guid>
      <description>Given a binary tree, return the inorder traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,3,2]  Solution 1: Recursion Recursion is the go-to method when dealing with tree data structures. In this problem, the tree needs to be printed out as inorder, which means to put root node in between left subtree and right subtree. Therefore, the recursion solution is done by recursively calling a funtion with a tree node as the argument.</description>
    </item>
    
  </channel>
</rss>