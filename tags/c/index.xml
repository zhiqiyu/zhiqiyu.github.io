<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on ZQ.Yu</title>
    <link>https://zhiqiyu.github.io/tags/c/</link>
    <description>Recent content in C on ZQ.Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Sep 2019 17:07:25 -0400</lastBuildDate><atom:link href="https://zhiqiyu.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory Ownership in C Explained</title>
      <link>https://zhiqiyu.github.io/post/memory_ownership/</link>
      <pubDate>Wed, 25 Sep 2019 17:07:25 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/memory_ownership/</guid>
      <description>The memory ownership problem or pointer ownership problem is a problem generally seen in C and C++ programs. The problem is generally violating a simple assumption that there should be only one pointer to a given piece of memory, so that when the memory is freed, no other pointers will point to an address that has already been freed.
For example, you have a main function, in which a pointer gfcontext_t *ctx to a struct gfcontext_t is created.</description>
    </item>
    
  </channel>
</rss>
