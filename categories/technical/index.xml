<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on ZQ.Yu</title>
    <link>https://zhiqiyu.github.io/categories/technical/</link>
    <description>Recent content in Technical on ZQ.Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Sep 2019 17:07:25 -0400</lastBuildDate>
    
	<atom:link href="https://zhiqiyu.github.io/categories/technical/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory Ownership in C Explained</title>
      <link>https://zhiqiyu.github.io/post/memory-ownership-in-c-explained/</link>
      <pubDate>Wed, 25 Sep 2019 17:07:25 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/memory-ownership-in-c-explained/</guid>
      <description>The memory ownership problem or pointer ownership problem is a problem generally seen in C and C++ programs. The problem is generally violating a simple assumption that there should be only one pointer to a given piece of memory, so that when the memory is freed, no other pointers will point to an address that has already been freed.
For example, you have a main function, in which a pointer gfcontext_t *ctx to a struct gfcontext_t is created.</description>
    </item>
    
    <item>
      <title>&#39;Undefined Symbol: PySlice_Unpack&#39; error in Pytorch</title>
      <link>https://zhiqiyu.github.io/post/undefined-symbol-pyslice_unpack-error-in-pytorch/</link>
      <pubDate>Wed, 24 Apr 2019 23:42:55 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/undefined-symbol-pyslice_unpack-error-in-pytorch/</guid>
      <description>Problem:
 &amp;lsquo;Undefined Symbol: PySlice_Unpack&amp;rsquo;
 Environment:
Pytorch = 1.0.1 Python = 3.6.0  Solution:
 Upgrade Python to 3.6.3. Seems like this is the only solution.
Update by conda install python==3.6.3 command if using Miniconda in CLI.
 </description>
    </item>
    
    <item>
      <title>Same-day Landsat-8 and Sentinel-2 Pair Generation on GEE</title>
      <link>https://zhiqiyu.github.io/post/same-day-landsat-8-and-sentinel-2-pair-generation-on-gee/</link>
      <pubDate>Wed, 13 Feb 2019 15:20:20 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/same-day-landsat-8-and-sentinel-2-pair-generation-on-gee/</guid>
      <description>This notebook presents a data preparation workflow that finds same-date and overlapped Landsat8 and Sentinel2 image patches and provide a way to download the processed images to the local machine.
This is a part of the ongoing research project Landsat2Sentinel.
The whole notebook is available on my Github repository.
import ee ee.Initialize() from IPython import display import zipfile import urllib from ipywidgets import IntProgress  Function for downloading images from GEE def download_tif(image, scale, name, folder): url = ee.</description>
    </item>
    
    <item>
      <title>What are Fully-Connected Layers (FCN) in Convolutional Neural Networks (CNN)?</title>
      <link>https://zhiqiyu.github.io/post/what-are-fully-connected-layers-fcn-in-convolutional-neural-networks-cnn/</link>
      <pubDate>Thu, 08 Nov 2018 11:24:36 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/what-are-fully-connected-layers-fcn-in-convolutional-neural-networks-cnn/</guid>
      <description>Recently, during a discussion with a colleague about his CNN model architecture on remote sensing image fusion task, he mentioned something that was interesting. Specifically, in his network, he used FCN implementations Keras.layers.Dense and torch.nn.Linear in his code, the input to the FCN is a 2D image with many channels with size (160, 160, channels). Traditionally, I think that to pass through a FCN layer, the neuron numbers of the first FCN layer in this case, should be 160 * 160 * channels, which basically means to flat the volume to a 1D array and feed in a traditional neural network.</description>
    </item>
    
    <item>
      <title>Installation of GDAL and its Python Libraries on Mac</title>
      <link>https://zhiqiyu.github.io/post/installation-of-gdal-and-its-python-libraries-on-mac/</link>
      <pubDate>Wed, 18 Oct 2017 17:07:47 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/installation-of-gdal-and-its-python-libraries-on-mac/</guid>
      <description>Recently I have been trying to install GDAL on my Mac and I cannot find a way to link the Python libraries to the Python program I am using so that I can import GDAL libraries by the import gdal statement in my python program.
The GDAL is designed to run in Mac OS X Terminals, but the installation include python libraries which are not automatically linked to the program.</description>
    </item>
    
  </channel>
</rss>