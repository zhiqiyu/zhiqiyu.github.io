<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on ZQ.Yu</title>
    <link>https://zhiqiyu.github.io/categories/technical/</link>
    <description>Recent content in Technical on ZQ.Yu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Feb 2021 16:02:03 -0500</lastBuildDate><atom:link href="https://zhiqiyu.github.io/categories/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Setup for Hugo Blog With Github Pages</title>
      <link>https://zhiqiyu.github.io/post/git-setup-for-hugo-blog-with-github-pages/</link>
      <pubDate>Wed, 10 Feb 2021 16:02:03 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/git-setup-for-hugo-blog-with-github-pages/</guid>
      <description>This is a short tutorial on how to use Git to manage Hugo blog contents, themes, and generated static files that will be hosted on GitHub Pages.
Initialize the Blog and the GitHub repo First, you need to initialize a Hugo blog, and enter the site folder:
hugo new site &amp;lt;sitename&amp;gt; cd &amp;lt;sitename&amp;gt; This creates an empty site with name sitename, the site has a structure like this:
Then you initialize a local Git repository in this folder with:</description>
    </item>
    
    <item>
      <title>Resources to make a fancy GitHub README profile</title>
      <link>https://zhiqiyu.github.io/post/fancy-github-readme/</link>
      <pubDate>Tue, 09 Feb 2021 12:15:13 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/fancy-github-readme/</guid>
      <description>GitHub is a wonderful place for developers to showcase their projects and works. It is also a mythical place where a lot of secret techniques can be utilized, combined to make it more useful.
GitHub pages As many of you know, GitHub has a GitHub Pages function that a user can use to create their user or organization sites conveniently. Basically, you just need to put source codes in a repo named username.</description>
    </item>
    
    <item>
      <title>Combine MODIS Terra and Aqua Products on GEE</title>
      <link>https://zhiqiyu.github.io/post/gee-combine-modis/</link>
      <pubDate>Tue, 04 Feb 2020 15:21:38 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/gee-combine-modis/</guid>
      <description>The Moderate Resolution Imaging Spectroradiometer (MODIS) has been providing high temporal resolution images since the first launch of Terra satellite in 1999 followed by the Aqua satellite in 2002. The Terra satellite passes from north to south in the morning at around 10:30 a.m. local time. The Aqua satellite passes from south to north in the afternoon at around 1:30 p.m. Since MODIS has a revisiting time of one or two days, for any given day, there are most likely be images from both Terra and Aqua satellites.</description>
    </item>
    
    <item>
      <title>Install and Troubleshoot Docker Toolbox on Windows 10 Home</title>
      <link>https://zhiqiyu.github.io/post/docker-win10home/</link>
      <pubDate>Tue, 26 Nov 2019 10:41:29 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/docker-win10home/</guid>
      <description>As the Docker for Windows only works on Windows 10 Pro and Enterprise editions, I cannot install it on my laptop which comes with a pre-installed Windows 10 Home. Fortunately, Docker has another product called Docker toolbox. It is specifically released for legacy desktop operating system versions. (Somehow windows 10 home is considered as legacy&amp;hellip;)
However, there are some caveats during the installation and configuration of the Docker toolbox on my laptop, so here are the problems and solutions I found useful:</description>
    </item>
    
    <item>
      <title>Solve LunarLander-v2 with Deep Q-learning</title>
      <link>https://zhiqiyu.github.io/post/ll-dqn/</link>
      <pubDate>Mon, 28 Oct 2019 22:53:17 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/ll-dqn/</guid>
      <description>the LL environ- ment is a simulated environment where the agent needs to successfully and safely land the aircraft in the designated area. The lunar lander has 4 discrete actions, do nothing, fire the left orientation engine, fire the main engine, and fire the right orientation engine. The states of the lander are represented as 8-dimensional vectors: (x, y, vx, vy, θ, vθ, lef tleg, rightleg), x and y are the x and y-coordinates of the lunar lander’s position on the screen.</description>
    </item>
    
    <item>
      <title>Memory Ownership in C Explained</title>
      <link>https://zhiqiyu.github.io/post/memory_ownership/</link>
      <pubDate>Wed, 25 Sep 2019 17:07:25 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/memory_ownership/</guid>
      <description>The memory ownership problem or pointer ownership problem is a problem generally seen in C and C++ programs. The problem is generally violating a simple assumption that there should be only one pointer to a given piece of memory, so that when the memory is freed, no other pointers will point to an address that has already been freed.
For example, you have a main function, in which a pointer gfcontext_t *ctx to a struct gfcontext_t is created.</description>
    </item>
    
    <item>
      <title>&#39;Undefined Symbol: PySlice_Unpack&#39; error in Pytorch</title>
      <link>https://zhiqiyu.github.io/post/undef-symbol-pytorch/</link>
      <pubDate>Wed, 24 Apr 2019 23:42:55 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/undef-symbol-pytorch/</guid>
      <description>Problem:
 &amp;lsquo;Undefined Symbol: PySlice_Unpack&amp;rsquo;
 Environment:
Pytorch = 1.0.1 Python = 3.6.0 Solution:
 Upgrade Python to 3.6.3. Seems like this is the only solution.
Update by conda install python==3.6.3 command if using Miniconda in CLI.
 </description>
    </item>
    
    <item>
      <title>Same-day Landsat-8 and Sentinel-2 Pair Generation on GEE</title>
      <link>https://zhiqiyu.github.io/post/landsat-sentinel-match/</link>
      <pubDate>Wed, 13 Feb 2019 15:20:20 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/landsat-sentinel-match/</guid>
      <description>This notebook presents a data preparation workflow that finds same-date and overlapped Landsat8 and Sentinel2 image patches and provide a way to download the processed images to the local machine.
This is a part of the ongoing research project Landsat2Sentinel.
The whole notebook is available on my Github repository.
import ee ee.Initialize() from IPython import display import zipfile import urllib from ipywidgets import IntProgress Function for downloading images from GEE def download_tif(image, scale, name, folder): url = ee.</description>
    </item>
    
    <item>
      <title>What are Fully-Connected Layers (FCN) in Convolutional Neural Networks (CNN)?</title>
      <link>https://zhiqiyu.github.io/post/conv-fc-conversion/</link>
      <pubDate>Thu, 08 Nov 2018 11:24:36 -0500</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/conv-fc-conversion/</guid>
      <description>Recently, during a discussion with a colleague about his CNN model architecture on remote sensing image fusion task, he mentioned something that was interesting. Specifically, in his network, he used FCN implementations Keras.layers.Dense and torch.nn.Linear in his code, the input to the FCN is a 2D image with many channels with size (160, 160, channels). Traditionally, I think that to pass through a FCN layer, the neuron numbers of the first FCN layer in this case, should be 160 * 160 * channels, which basically means to flat the volume to a 1D array and feed in a traditional neural network.</description>
    </item>
    
    <item>
      <title>Installation of GDAL and its Python Libraries on Mac</title>
      <link>https://zhiqiyu.github.io/post/gdal-install/</link>
      <pubDate>Wed, 18 Oct 2017 17:07:47 -0400</pubDate>
      
      <guid>https://zhiqiyu.github.io/post/gdal-install/</guid>
      <description>Recently I have been trying to install GDAL on my Mac and I cannot find a way to link the Python libraries to the Python program I am using so that I can import GDAL libraries by the import gdal statement in my python program.
The GDAL is designed to run in Mac OS X Terminals, but the installation include python libraries which are not automatically linked to the program. Therefore, the only thing we need to do to make it work in python is to link those libraries properly.</description>
    </item>
    
  </channel>
</rss>
